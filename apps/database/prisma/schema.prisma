// This is your Prisma schema file for PostgreSQL
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  address     String?
  postalCode  String?
  city        String?
  country     String   @default("Deutschland")
  latitude    Decimal?
  longitude   Decimal?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  dogs        Dog[]
  studServices StudService[]
  litters     Litter[]
  userRoles   UserRole[]
  assignedRoles UserRole[] @relation("RoleAssignedBy")

  // Indexes
  @@index([postalCode])
  @@index([latitude, longitude])
  @@map("users")
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  role       String   // BREEDER, STUD_OWNER, ADMIN, MEMBER, EDITOR
  isActive   Boolean  @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user         User  @relation(fields: [userId], references: [id])
  assignedByUser User? @relation("RoleAssignedBy", fields: [assignedBy], references: [id])

  // Constraints
  @@unique([userId, role])
  @@map("user_roles")
}

model Dog {
  id             String   @id @default(uuid())
  name           String
  gender         String   // R, H
  birthDate      DateTime
  deathDate      DateTime?
  color          String
  microchipId    String?  @unique
  pedigreeNumber String?  @unique
  isStudAvailable Boolean @default(false)
  isActive       Boolean  @default(true)
  description    String?
  ownerId        String
  motherId       String?
  fatherId       String?
  litterNumber   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  owner           User           @relation(fields: [ownerId], references: [id])
  mother          Dog?           @relation("MotherOffspring", fields: [motherId], references: [id])
  father          Dog?           @relation("FatherOffspring", fields: [fatherId], references: [id])
  offspringAsMother Dog[]        @relation("MotherOffspring")
  offspringAsFather Dog[]        @relation("FatherOffspring")
  littersAsMother Litter[]       @relation("LitterMother")
  littersAsFather Litter[]       @relation("LitterFather")
  litter          Litter?        @relation("LitterPuppies", fields: [litterId], references: [id])
  litterId        String?
  healthRecords   HealthRecord[]
  medicalFindings MedicalFinding[]
  awards          Award[]
  geneticTests    GeneticTest[]
  studServices    StudService[]

  // Indexes
  @@index([name])
  @@index([gender])
  @@index([birthDate])
  @@index([deathDate])
  @@index([color])
  @@index([ownerId])
  @@index([motherId])
  @@index([fatherId])
  @@index([litterNumber])
  @@index([litterId])
  @@index([isStudAvailable])
  @@unique([motherId, litterNumber])
  @@map("dogs")
}

model HealthRecord {
  id           String   @id @default(uuid())
  dogId        String
  recordType   String   // VACCINATION, HEALTH_CERTIFICATE, BREEDING_CERTIFICATE, OTHER
  title        String
  description  String?
  recordDate   DateTime
  expiryDate   DateTime?
  veterinarian String?
  documentUrl  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  dog Dog @relation(fields: [dogId], references: [id])

  // Indexes
  @@index([dogId])
  @@index([recordDate])
  @@index([expiryDate])
  @@map("health_records")
}

model MedicalFinding {
  id               String   @id @default(uuid())
  dogId            String
  date             DateTime
  shortDescription String
  remarks          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  dog Dog @relation(fields: [dogId], references: [id])

  // Indexes
  @@index([dogId])
  @@index([date])
  @@index([shortDescription])
  @@map("medical_findings")
}

model Award {
  id          String    @id @default(uuid())
  dogId       String
  code        String
  date        DateTime?
  description String
  issuer      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  dog Dog @relation(fields: [dogId], references: [id])

  // Indexes
  @@index([dogId])
  @@index([code])
  @@index([date])
  @@index([issuer])
  @@map("awards")
}

model GeneticTest {
  id               String   @id @default(uuid())
  dogId            String
  testType         String   // HD, ED, PRA, DM, VWD, OTHER
  testDate         DateTime
  result           String   // NORMAL, CARRIER, AFFECTED, UNKNOWN
  laboratory       String
  certificateNumber String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  dog Dog @relation(fields: [dogId], references: [id])

  // Indexes
  @@index([dogId])
  @@index([testType])
  @@index([testDate])
  @@index([result])
  @@index([laboratory])
  @@map("genetic_tests")
}

model StudService {
  id          String   @id @default(uuid())
  studDogId   String
  ownerId     String
  isAvailable Boolean  @default(true)
  price       Decimal?
  description String?
  contactInfo String
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  studDog Dog  @relation(fields: [studDogId], references: [id])
  owner   User @relation(fields: [ownerId], references: [id])

  // Indexes
  @@index([studDogId])
  @@index([isAvailable])
  @@map("stud_services")
}

model Litter {
  id              String   @id @default(uuid())
  motherId        String
  fatherId        String?
  breederId       String
  litterNumber    String
  plannedDate     DateTime?
  expectedDate    DateTime?
  actualDate      DateTime?
  status          String   @default("PLANNED") // PLANNED, IN_PROGRESS, BORN, AVAILABLE, RESERVED, SOLD, CANCELLED
  expectedPuppies Int?
  actualPuppies   Int?
  description     String?
  isPublic        Boolean  @default(true)
  contactInfo     String?
  price           Decimal?
  location        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  mother   Dog   @relation("LitterMother", fields: [motherId], references: [id])
  father   Dog?  @relation("LitterFather", fields: [fatherId], references: [id])
  breeder  User  @relation(fields: [breederId], references: [id])
  puppies  Dog[] @relation("LitterPuppies")

  // Indexes
  @@index([motherId])
  @@index([fatherId])
  @@index([breederId])
  @@index([status])
  @@index([isPublic])
  @@index([plannedDate])
  @@index([expectedDate])
  @@index([actualDate])
  @@unique([motherId, litterNumber])
  @@map("litters")
}